# A tool for reproducing results of experiments (for your convenience)
# author: Niu Xinghao
# notes for using at the end
# for Google Colab notebook (V100 GPU high RAM)

# upload files (images and cnsst.py) to /content/sample_data
import os
os.chdir(r'/content/sample_data')
from google.colab import files
image = files._upload_file() # specify file name

! pip install sklearn_som
! pip install cvi

import time
import matplotlib.pyplot as plt
import numpy as np

import sklearn
from sklearn.cluster import KMeans
from sklearn.cluster import MeanShift
from sklearn.cluster import DBSCAN
from sklearn_som.som import SOM

from sklearn import metrics
from PIL import Image
import pandas as pd

import os
import cvi
from PIL import Image
os.chdir(r'/content/sample_data')
import cnsst
from cnsst import CNSST

# Flag of three colors for fisrt test
def three_color_flag(h, w):
    """
    The three colors' flag that is used for first test: h = 100, w = 200"""
    image = np.zeros((h, w, 3),dtype=np.uint8)
    for m in range(0,h):
        for n in range(0,w):
            if m >=0 and m<(h/3):
                image[m,n] = [254,0,0]
            elif m >=h/3 and m<(h*(2/3)):
                image[m,n] = [0,254,0]
            elif m >=(h*(2/3)) and m<=(h*(3/3)):
                image[m,n] = [0,0,254]
    im = Image.fromarray(image)
    im.show()
    return image


class settings_a:
    """
    Parameters' settings
    --------------------

    """
    def __init__(self, directory, file, option = ''):
        if option == 'first test':
            self.image_1 = three_color_flag(100, 200)
            h, w, d = self.image_1.shape
            self.image_2 = np.reshape(self.image_1, (h * w, d))
            self.h = h
            self.w = w
            self.d = d
            self.directory = directory
        else:
            self.directory = directory
            os.chdir(self.directory)
            self.original_image = Image.open(file)
            image_1 = np.array(self.original_image, dtype=np.float64) # 255 is deleted
            h, w, d = image_1.shape
            image_2 = np.reshape(image_1, (h * w, d))
            self.h = h
            self.w = w
            self.d = d
            self.image_1 = image_1
            self.image_2 = image_2

        # k means clustering
        self.number_of_clusters = 20
        self.random_state = 0
        self.init = 'k-means++'

        # mean shift clustering
        # none

        # DBSCAN clustering
        self.eps_1 = 3
        self.min_samples_1 = 400

        # self-organizing map clustering
        self.m_1 = 5
        self.n_1 = 2
        self.dim_1 = 3


class compare:
    def __init__(self, methods, option = ''):  # option added
        directory = r'/content/sample_data'
        if option == 'first test':
            file = 0
        else:
            print('\n')
            print('specify file name only')
            file = eval(input())
        self.option  = option
        self.settings = settings_a(directory, file, option)  # option added
        self.image_1 =self.settings.image_1
        self.image_2 =self.settings.image_2
        self.image = 0
        self.im = 0
        self.name = ''
        self.time_start = 0
        self.time_end = 0
        self.time_total = 0
        self.clustering = 0
        self.labels = 0
        self.selected_methods = methods
        self.cm_1 = 0
        self.cm_2 = 0
        self.cm_3 = 0
        self.t_r = total_result(self, directory)

    def run(self):
        for method in self.selected_methods:
            if method == 'k-means clustering':
                self.name = 'k-means clustering'
                self.k_means()
            if method == 'mean shift clustering':
                self.name = 'mean shift clustering'
                self.mean_shift()

            if method == 'DBSCAN clustering':
                self.name = 'DBSCAN clustering'
                self.dbscan()

            if method == 'self-organizing map clustering':
                self.name = 'self-organizing map clustering'
                self.self_organizing_map()

            if method == 'CNSST clustering':
                self.name = 'CNSST clustering'
                self.CNSST_()

    def k_means(self):
        self.record_time_start()
        self.clustering = KMeans(n_clusters=self.settings.number_of_clusters, random_state=self.settings.random_state, init = self.settings.init).fit(self.image_2)
        self.labels = self.clustering.labels_
        self.record_time_end()
        self.record_time_total()

        self.record_number_of_clusters()

        self.cal_cm_(self.option)
        self.record_cal_cm_()

        self.plot_1()
        self.save_result()

    def mean_shift(self):
        self.record_time_start()
        self.clustering = MeanShift().fit(self.image_2)
        self.labels = self.clustering.labels_
        self.record_time_end()
        self.record_time_total()

        self.record_number_of_clusters()

        self.cal_cm_(self.option)
        self.record_cal_cm_()

        self.plot_1()
        self.save_result()

    def dbscan(self):
        self.record_time_start()
        self.clustering = DBSCAN(eps=self.settings.eps_1, min_samples=self.settings.min_samples_1).fit(self.image_2)
        self.labels = self.clustering.labels_
        self.record_time_end()
        self.record_time_total()

        self.record_number_of_clusters()

        self.cal_cm_(self.option)
        self.record_cal_cm_()

        self.plot_2()
        self.save_result()

    def self_organizing_map(self):
        self.record_time_start()
        self.clustering = SOM(m = self.settings.m_1, n = self.settings.n_1, dim = self.settings.dim_1)
        self.clustering.fit(self.image_2)
        self.labels = self.clustering.predict(self.image_2)
        self.record_time_end()
        self.record_time_total()

        self.record_number_of_clusters()

        self.cal_cm_(self.option)
        self.record_cal_cm_()

        self.plot_2()
        self.save_result()


    def CNSST_(self):
        self.record_time_start()

        self.clustering = CNSST(self.image_1)
        self.clustering.run()
        self.labels = self.clustering._labels
        

        self.record_time_end()
        self.record_time_total()

        self.record_number_of_clusters()

        self.cal_cm_(self.option)
        self.record_cal_cm_()

        self.im = self.clustering.im
        self.save_result()

    def record_number_of_clusters(self):
        self.t_r.storage_n_clusters.append(len(set(self.labels)))

    def record_time_start(self):
        self.time_start = time.time()

    def record_time_end(self):
        self.time_end = time.time()

    def record_time_total(self):
        self.time_total =  self.time_end - self.time_start
        self.t_r.storage.append(self.time_total)     #
        self.t_r.storage_name.append(self.name)      #

    def cal_cm_(self, opt):
        '''calculate clustring metric'''
        if opt == 'third test':
          pass
        else:
          fc = cvi.PS()
            # silhouette coefficient
          self.cm_1 = metrics.silhouette_score(self.image_2, self.labels, metric='euclidean')
            # calinski and harabasz score
          self.cm_2 = metrics.calinski_harabasz_score(self.image_2, self.labels)
            # PS
          self.cm_3 = fc.get_cvi(self.image_2, self.labels)

    def record_cal_cm_(self):
        '''record clustring metric'''
        self.t_r.storage_clu_metric_1.append(self.cm_1)
        self.t_r.storage_clu_metric_2.append(self.cm_2)
        self.t_r.storage_clu_metric_3.append(self.cm_3)

    def plot_1(self): # plot by using result of clustering
        self.image = np.zeros((self.settings.h, self.settings.w, 3),dtype=np.uint8)
        for m in range(0,self.settings.h):
            for n in range(0,self.settings.w):
                self.image[m,n] = list(self.clustering.cluster_centers_[self.labels[m*self.settings.w + n]]) # 255 is deleted
        self.im = Image.fromarray(self.image)


    def plot_2(self):# plot by using result of clustering (only labels_)
        self.image = np.zeros((self.settings.h, self.settings.w, 3),dtype=np.uint8)
        label_list = list(set(self.labels)).copy()
        for label in label_list:
            positions = []
            for i in range(0, len(self.labels)):
                if self.labels[i]== label:
                    positions.append(list(divmod(i,self.settings.w)))

            sum_array = np.array([0, 0, 0])
            for position in positions:
                sum_array = self.settings.image_1[position[0],position[1]] + sum_array # 255 is deleted

            average_array = sum_array/len(positions)
            for position in positions:
                self.image[position[0],position[1]] = list(average_array)
        self.im = Image.fromarray(self.image)


    def save_result(self):
        os.chdir(self.settings.directory)
        self.im.save(self.name+'.jpg')


class total_result:
    def __init__(self,compare_instance, directory):
        self.index = compare_instance.selected_methods
        self.directory = directory
        # record number of clusters
        self.storage_n_clusters = []
        # record time_total
        self.storage = []
        # record methods' names
        self.storage_name = []
        # record clustering metrics
        self.storage_clu_metric_1 = [] #
        self.storage_clu_metric_2 = []
        self.storage_clu_metric_3 = []

    def show_result_test_1_2(self):
        print('total result:')
        df = pd.DataFrame(
         {"time(seconds)" : self.storage,
          'number of clusters' : self.storage_n_clusters,
          "silhouette coefficient_(cm_1)" : self.storage_clu_metric_1,
          "calinski and harabasz score_(cm_2)" : self.storage_clu_metric_2,
          "PS_(cm_3)":   self.storage_clu_metric_3 },
           index = self.index)
        print('\n')
        print(f'clustering results (images) are stored at {self.directory}')
        df.to_csv(r'/content/sample_data/result.csv')
        return df

    def show_result_test_3(self):
        print('total result:')
        df = pd.DataFrame(
         {"time(seconds)" : self.storage,
          'number of clusters' : self.storage_n_clusters },
           index = self.index)
        print('\n')
        print(f'clustering results (images) are stored at {self.directory}')
        df.to_csv(r'/content/sample_data/result_3.csv')
        return df

def choose_test(test):
    if test == 'first test':
        # first test
        start = compare(methods, option = 'first test')
        start.run()
        return start.t_r.show_result_test_1_2()
    elif test == 'second test':
        # second test
        start = compare(methods, option = 'second test')
        start.run()
        return start.t_r.show_result_test_1_2()
    elif test == 'third test':
        # third test
        start = compare(methods, option = 'third test')
        start.run()
        return start.t_r.show_result_test_3()
#------------------------------------------------------------------------------------------------
# choose methods here:
methods = ['CNSST clustering',
           'DBSCAN clustering',
           'mean shift clustering',
           'self-organizing map clustering']
           
# choose and run test:
# 'first test'
# 'second test'
# 'third test'
choose_test('first test')
